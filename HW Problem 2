import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.linear_model import Ridge  
import matplotlib.pyplot as plt

#Load the houding dataset
data = pd.read_csv("Housing.csv")

#Define
X = data[['area', 'bedrooms', 'bathrooms', 'stories', 'mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'parking', 'prefarea', 'furnishingstatus']]
y = data['price']

#Split the data into training and test sets (80%, 20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Standardize the features (optional but recommended)
#Calculate mean and standard deviation for each feature in the training set
mean = X_train.mean()
std = X_train.std()

#Apply custom scaling to both the training and test sets
X_train = (X_train - mean) / std
X_test = (X_test - mean) / std

from sklearn.svm import SVR
from sklearn.impute import SimpleImputer

#Impute missing values with the mean
imputer = SimpleImputer(strategy='mean')
X_train = imputer.fit_transform(X_train)

#Create an SVR model
svr_model = SVR(kernel='linear', C=1.0, epsilon=0.1) ##hyperparameters

#Train the SVR model on the training data
svr_model.fit(X_train, y_train)

# Predict housing prices using the SVR model
y_pred = svr_model.predict(X_train)

# Plot the predictions against the actual values
plt.scatter(y_train, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("SVR Regression Model")
plt.show()

# Create a linear regression model with regularization 
linear_model = Ridge(alpha=1.0)  # Adjust alpha for regularization strength

# Train the linear regression model on the training data
linear_model.fit(X_train, y_train)

# Calculate predictions for linear regression
y_pred_linear = linear_model.predict(X_train)

mae_svr = mean_absolute_error(y_train, y_pred)
mse_svr = mean_squared_error(y_train, y_pred)
r2_svr = r2_score(y_train, y_pred)

mae_linear = mean_absolute_error(y_train, y_pred_linear)
mse_linear = mean_squared_error(y_train, y_pred_linear)
r2_linear = r2_score(y_train, y_pred_linear)

#Results
print("SVR Results:")
print("MAE: ", mae_svr)
print("MSE: ", mse_svr)
print("R-squared: ", r2_svr)

print("\nLinear Regression with Regularization Results:")
print("MAE: ", mae_linear)
print("MSE: ", mse_linear)
print("R-squared: ", r2_linear)
